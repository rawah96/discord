{"version":3,"sources":["discord.png","components/Sidebar/SidebarChannel.js","features/userSlice.js","components/Login/Logout.js","components/Sidebar/Sidebar.js","components/Chat/ChatHeader.js","components/Chat/Message.js","components/Chat/Chat.js","App.js","features/appSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","SidebarChannel","id","channel","className","userSlice","createSlice","name","initialState","user","reducers","In","state","action","payload","out","actions","selectUser","Logout","clientId","buttonText","onLogoutSuccess","console","log","alert","Sidebar","useSelector","useState","useEffect","fontSize","Avatar","displayName","ChatHeader","placeholder","Message","Chat","type","onFailure","res","App","dispatch","useDispatch","setName","src","discord","alt","onSuccess","profileObj","cookiePolicy","isSignedIn","appSlice","channelId","channelName","setChannelId","app","configureStore","reducer","userReducer","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.46061cac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/discord.30b75487.png\";","import React from 'react'\nimport './SidebarChannel.css'\n\nfunction SidebarChannel({id, channel}) {\n    return (\n        <div className=\"sidebar-channel\">\n            <h4><span className=\"channel-hash\">#</span>{channel}</h4>\n        </div>\n    )\n}\n\nexport default SidebarChannel\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    In: (state, action) => {\r\n      state.user += action.payload;\r\n    },\r\n    out:(state) => {\r\n      state.user = null;\r\n    }\r\n  },\r\n});\r\n\r\nexport const { In, out } = userSlice.actions;\r\n\r\nexport const selectUser = state => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import React from 'react'\nimport { GoogleLogout } from 'react-google-login';\nconst clientId = \"304788118855-l4frhratrtujhhlkq20482an60okom01.apps.googleusercontent.com\"\n\nfunction Logout() {\n    const onSuccess = () => {\n        console.log('Logout made successfully');\n        alert('Logout made successfully âœŒ');\n      };\n\n    return (\n        <div>\n        <GoogleLogout\n            clientId={clientId}\n            buttonText=\"Logout\"\n            onLogoutSuccess={onSuccess}\n        ></GoogleLogout>\n        \n        </div>\n    )\n}\n\nexport default Logout","import React, {useState, useEffect} from 'react'\nimport './Sidebar.css'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\nimport AddIcon from '@material-ui/icons/Add'\nimport SidebarChannel from './SidebarChannel';\nimport SignalCellularAltIcon from '@material-ui/icons/SignalCellularAlt'\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined'\nimport CallIcon from '@material-ui/icons/Call'\nimport Avatar from '@material-ui/core/Avatar'\nimport MicIcon from '@material-ui/icons/Mic'\nimport HeadsetIcon from '@material-ui/icons/Headset'\nimport SettingsIcon from '@material-ui/icons/Settings'\nimport {selectUser} from '../../features/userSlice'\nimport {useSelector} from 'react-redux'\nimport Logout from '../Login/Logout'\n\nfunction Sidebar() {\n    const user = useSelector(selectUser);\n    const [channels, setChannels] = useState([]);\n\n    useEffect(() => {\n        \n    }, [])\n\n    return (\n        <div className=\"sidebar\">\n            <div className=\"sidebar-top\">\n                <h3>Rawah Alsinan</h3>\n                <ExpandMoreIcon />\n            </div>\n            <div className=\"sidebar-channels\">\n                <div className=\"channels-header\">\n                    <div className=\"sidebar-header\">\n                        <ExpandMoreIcon />\n                        <h4>Text Channels</h4>\n                    </div>\n                    <AddIcon className=\"add-channel\" />\n                </div>\n                <div className=\"channels-list\">\n                    <SidebarChannel channel=\"youtube\"/>\n                    <SidebarChannel />\n                    <SidebarChannel />\n                    <SidebarChannel />\n                </div>\n            </div>\n            <div className=\"sidebar-voice\">\n                <SignalCellularAltIcon\n                className=\"voice-icon\"\n                fontSize=\"large\"/>\n                <div className=\"voice-info\">\n                    <h3>Voice connected</h3>\n                    <p>Stream</p>\n                </div>\n\n                <div className=\"voice-icons\">\n                    <InfoOutlinedIcon />\n                    <CallIcon />\n                </div>\n                </div>\n\n                <div className=\"sidebar-profile\">\n                    <Avatar />\n                    <div className=\"profile-info\">\n                        <h3>@{user.displayName}</h3>\n                        <p>#thisIsMyId</p>\n                    </div>\n\n                    <div className=\"profile-icons\">\n                        <MicIcon />\n                        <HeadsetIcon />\n                        <SettingsIcon />\n                    </div>\n                </div>\n        </div>\n    )\n}\n\nexport default Sidebar\n","import React from 'react'\nimport './ChatHeader.css'\nimport NotificationsIcon from '@material-ui/icons/Notifications'\nimport EditLocationRoundedIcon from '@material-ui/icons/EditLocationRounded'\nimport PeopleAltRoundedIcon from '@material-ui/icons/PeopleAltRounded'\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded';\nimport SendRoundedIcon from '@material-ui/icons/SendRounded'\nimport HelpRoundedIcon from '@material-ui/icons/HelpRounded'\nimport Logout from '../Login/Logout'\n\nfunction ChatHeader() {\n    return (\n        <div className=\"chat-header\">\n            <div className=\"header-left\">\n                <h2><span className=\"header-hash\">#</span></h2>\n                Test Channel name\n            </div>\n            <div className=\"header-right\">\n                <NotificationsIcon />\n                <EditLocationRoundedIcon />\n                <PeopleAltRoundedIcon />\n                <div className=\"search\">\n                    <input placeholder=\"Search\"/>\n                        <SearchRoundedIcon />\n                </div>\n                <SendRoundedIcon />\n                <HelpRoundedIcon />\n                <Logout />\n            </div>\n        </div>\n    )\n}\n\nexport default ChatHeader\n","import React from 'react'\nimport './Message.css'\nimport {Avatar} from '@material-ui/core'\n\nfunction Message() {\n    return (\n        <div className=\"message\">\n            <Avatar />\n            <div className=\"msg-info\">\n                <h4>Rawah-alsinan <span className=\"time-stamp\"></span></h4>\n                <p>this is a message</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Message\n","import React from 'react'\nimport './Chat.css'\nimport ChatHeader from './ChatHeader';\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\nimport CardGiftcardIcon from '@material-ui/icons/CardGiftcard'\nimport GifIcon from '@material-ui/icons/Gif'\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions'\nimport Message from './Message';\n\nfunction Chat() {\n    return (\n        <div className=\"chat\">\n            <ChatHeader />\n            <div className=\"chat-msgs\">\n                <Message />\n            </div>\n            <div className=\"chat-input\">\n                <AddCircleIcon fontSize=\"large\"/>\n                <form>\n                    <input placeholder={`Message #TESTCHANNEL`} />\n                    {/* invisible button but functionality works */}\n                    <button \n                    className=\"chat-input-btn\"\n                    type=\"submit\">Send Message</button>\n                </form>\n                <div className=\"chat-input-icons\">\n                    <CardGiftcardIcon fontSize=\"large\" />\n                    <GifIcon fontSize=\"large\" />\n                    <EmojiEmotionsIcon fontSize=\"large\" />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Chat\n","import React, {useState, useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport './App.css';\r\nimport Sidebar from './components/Sidebar/Sidebar'\r\nimport Chat from './components/Chat/Chat'\r\nimport {selectUser, logout} from './features/userSlice'\r\nimport { GoogleLogin } from 'react-google-login';\r\nimport { refreshTokenSetup } from './utils/refreshToken';\r\nimport './components/Login/Login.css'\r\nimport discord from './discord.png'\r\nimport {In, out} from './features/userSlice'\r\nimport Logout from './components/Login/Logout'\r\n\r\nconst clientId = \"304788118855-l4frhratrtujhhlkq20482an60okom01.apps.googleusercontent.com\"\r\nconst onSuccess = (res) => {\r\n  refreshTokenSetup(res);\r\n};\r\n\r\nconst onFailure = (res) => {\r\n};\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const [name, setName] = useState('');\r\n  // dispatch ==> push things into the data layer\r\n  const user = useSelector(selectUser);\r\n  \r\n  const handleName = (res) => {\r\n    setName(res.profileObj.name);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(name) {\r\n      dispatch(In({\r\n        displayName: name,\r\n        // get id\r\n        // get photo url\r\n        // get email\r\n      }))\r\n    } else {\r\n      dispatch(out({\r\n        displayName: name,\r\n      }\r\n      ))\r\n    }\r\n    // should be dispatch ?\r\n  }, [name])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {user ? <>\r\n        <Sidebar />\r\n        <Chat />\r\n      </>:<>\r\n      <div className=\"login\">\r\n          <img src={discord} alt=\"\"/>\r\n        <GoogleLogin\r\n          className=\"signin\"\r\n          clientId={clientId}\r\n        // buttonText=\"Login\"\r\n          onSuccess={handleName}\r\n          onFailure={onFailure}\r\n          cookiePolicy={'single_host_origin'}\r\n          isSignedIn={true} \r\n        />\r\n        {/* {name ? <h1 id=\"logged\">Logged in as {name}</h1> : null} */}\r\n        </div>\r\n      </>}      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const appSlice = createSlice({\n  name: 'app',\n  initialState: {\n    channelId: null,\n    channelName: null,\n  },\n  reducers: {\n    setChannelId: (state, action) => {\n      state.app += action.payload;\n    },\n  },\n});\n\nexport const { setChannelId } = appSlice.actions;\n\nexport const selectChannelId = state => state.app.channelId;\nexport const selectChannelName = state => state.app.channelName\n\nexport default appSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice';\r\nimport appReducer from '../features/appSlice';\r\n\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    app: appReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}