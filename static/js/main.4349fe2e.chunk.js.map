{"version":3,"sources":["components/Sidebar/SidebarChannel.js","components/Sidebar/Sidebar.js","components/Chat/ChatHeader.js","components/Chat/Message.js","components/Chat/Chat.js","App.js","features/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["SidebarChannel","id","channel","className","Sidebar","fontSize","Avatar","ChatHeader","placeholder","Message","Chat","type","App","useEffect","fetch","then","res","json","data","console","log","counterSlice","createSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kYAWeA,MARf,YAAuC,EAAdC,GAAe,IAAXC,EAAU,EAAVA,QACzB,OACI,yBAAKC,UAAU,mBACX,4BAAI,0BAAMA,UAAU,gBAAhB,KAAwCD,K,8GC6DzCE,MAtDf,WACI,OACI,yBAAKD,UAAU,WACX,yBAAKA,UAAU,eACX,6CACA,kBAAC,IAAD,OAEJ,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,kBACX,kBAAC,IAAD,MACA,8CAEJ,kBAAC,IAAD,CAASA,UAAU,iBAEvB,yBAAKA,UAAU,iBACX,kBAAC,EAAD,CAAgBD,QAAQ,YACxB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QAGR,yBAAKC,UAAU,iBACX,kBAAC,IAAD,CACAA,UAAU,aACVE,SAAS,UACT,yBAAKF,UAAU,cACX,+CACA,sCAGJ,yBAAKA,UAAU,eACX,kBAAC,IAAD,MACA,kBAAC,IAAD,QAIJ,yBAAKA,UAAU,mBACX,kBAACG,EAAA,EAAD,MACA,yBAAKH,UAAU,gBACX,8CACA,2CAGJ,yBAAKA,UAAU,iBACX,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,U,oHC7BTI,MAtBf,WACI,OACI,yBAAKJ,UAAU,eACX,yBAAKA,UAAU,eACX,4BAAI,0BAAMA,UAAU,eAAhB,MADR,qBAIA,yBAAKA,UAAU,gBACX,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,yBAAKA,UAAU,UACX,2BAAOK,YAAY,WACf,kBAAC,IAAD,OAER,kBAAC,IAAD,MACA,kBAAC,IAAD,S,0ECTDC,MAZf,WACI,OACI,yBAAKN,UAAU,WACX,kBAACG,EAAA,EAAD,MACA,yBAAKH,UAAU,YACX,6CAAkB,0BAAMA,UAAU,gBAClC,mDCyBDO,MA1Bf,WACI,OACI,yBAAKP,UAAU,QACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,aACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,cACX,kBAAC,IAAD,CAAeE,SAAS,UACxB,8BACI,2BAAOG,YAAW,yBAElB,4BACAL,UAAU,iBACVQ,KAAK,UAFL,iBAIJ,yBAAKR,UAAU,oBACX,kBAAC,IAAD,CAAkBE,SAAS,UAC3B,kBAAC,IAAD,CAASA,SAAS,UAClB,kBAAC,IAAD,CAAmBA,SAAS,cCJjCO,MAnBf,WAWE,OAVAC,qBAAU,WAGNC,MAAM,IACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAASC,QAAQC,IAAIF,QAI5B,IAED,yBAAKf,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,QCjBOkB,EAAeC,YAAY,CACtCC,KAAM,UACNC,aAAc,CACZC,MAAO,GAETC,SAAU,CACRC,UAAW,SAAAC,GAKTA,EAAMH,OAAS,GAEjBI,UAAW,SAAAD,GACTA,EAAMH,OAAS,GAEjBK,kBAAmB,SAACF,EAAOG,GACzBH,EAAMH,OAASM,EAAOC,Y,EAK+BX,EAAaY,QAiBzDZ,G,EAjBAM,U,EAAWE,U,EAAWC,kBAiBtBT,EAAf,SCtCea,eAAe,CAC5BC,QAAS,CACPC,QAASC,K,SCOOC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,KAAD,CAAUC,MAAOA,IACf,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,MAAK,SAAAqC,GACjCA,EAAaC,kB","file":"static/js/main.4349fe2e.chunk.js","sourcesContent":["import React from 'react'\nimport './SidebarChannel.css'\n\nfunction SidebarChannel({id, channel}) {\n    return (\n        <div className=\"sidebar-channel\">\n            <h4><span className=\"channel-hash\">#</span>{channel}</h4>\n        </div>\n    )\n}\n\nexport default SidebarChannel\n","import React from 'react'\nimport './Sidebar.css'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\nimport AddIcon from '@material-ui/icons/Add'\nimport SidebarChannel from './SidebarChannel';\nimport SignalCellularAltIcon from '@material-ui/icons/SignalCellularAlt'\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined'\nimport CallIcon from '@material-ui/icons/Call'\nimport Avatar from '@material-ui/core/Avatar'\nimport MicIcon from '@material-ui/icons/Mic'\nimport HeadsetIcon from '@material-ui/icons/Headset'\nimport SettingsIcon from '@material-ui/icons/Settings'\n\nfunction Sidebar() {\n    return (\n        <div className=\"sidebar\">\n            <div className=\"sidebar-top\">\n                <h3>Rawah Alsinan</h3>\n                <ExpandMoreIcon />\n            </div>\n            <div className=\"sidebar-channels\">\n                <div className=\"channels-header\">\n                    <div className=\"sidebar-header\">\n                        <ExpandMoreIcon />\n                        <h4>Text Channels</h4>\n                    </div>\n                    <AddIcon className=\"add-channel\" />\n                </div>\n                <div className=\"channels-list\">\n                    <SidebarChannel channel=\"youtube\"/>\n                    <SidebarChannel />\n                    <SidebarChannel />\n                    <SidebarChannel />\n                </div>\n            </div>\n            <div className=\"sidebar-voice\">\n                <SignalCellularAltIcon\n                className=\"voice-icon\"\n                fontSize=\"large\"/>\n                <div className=\"voice-info\">\n                    <h3>Voice connected</h3>\n                    <p>Stream</p>\n                </div>\n\n                <div className=\"voice-icons\">\n                    <InfoOutlinedIcon />\n                    <CallIcon />\n                </div>\n                </div>\n\n                <div className=\"sidebar-profile\">\n                    <Avatar />\n                    <div className=\"profile-info\">\n                        <h3>@Rawah-alsinan</h3>\n                        <p>#thisIsMyId</p>\n                    </div>\n\n                    <div className=\"profile-icons\">\n                        <MicIcon />\n                        <HeadsetIcon />\n                        <SettingsIcon />\n                    </div>\n                </div>\n        </div>\n    )\n}\n\nexport default Sidebar\n","import React from 'react'\nimport './ChatHeader.css'\nimport NotificationsIcon from '@material-ui/icons/Notifications'\nimport EditLocationRoundedIcon from '@material-ui/icons/EditLocationRounded'\nimport PeopleAltRoundedIcon from '@material-ui/icons/PeopleAltRounded'\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded';\nimport SendRoundedIcon from '@material-ui/icons/SendRounded'\nimport HelpRoundedIcon from '@material-ui/icons/HelpRounded'\n\nfunction ChatHeader() {\n    return (\n        <div className=\"chat-header\">\n            <div className=\"header-left\">\n                <h2><span className=\"header-hash\">#</span></h2>\n                Test Channel name\n            </div>\n            <div className=\"header-right\">\n                <NotificationsIcon />\n                <EditLocationRoundedIcon />\n                <PeopleAltRoundedIcon />\n                <div className=\"search\">\n                    <input placeholder=\"Search\"/>\n                        <SearchRoundedIcon />\n                </div>\n                <SendRoundedIcon />\n                <HelpRoundedIcon />\n            </div>\n        </div>\n    )\n}\n\nexport default ChatHeader\n","import React from 'react'\nimport './Message.css'\nimport {Avatar} from '@material-ui/core'\n\nfunction Message() {\n    return (\n        <div className=\"message\">\n            <Avatar />\n            <div className=\"msg-info\">\n                <h4>Rawah-alsinan <span className=\"time-stamp\"></span></h4>\n                <p>this is a message</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Message\n","import React from 'react'\nimport './Chat.css'\nimport ChatHeader from './ChatHeader';\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\nimport CardGiftcardIcon from '@material-ui/icons/CardGiftcard'\nimport GifIcon from '@material-ui/icons/Gif'\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions'\nimport Message from './Message';\n\nfunction Chat() {\n    return (\n        <div className=\"chat\">\n            <ChatHeader />\n            <div className=\"chat-msgs\">\n                <Message />\n            </div>\n            <div className=\"chat-input\">\n                <AddCircleIcon fontSize=\"large\"/>\n                <form>\n                    <input placeholder={`Message #TESTCHANNEL`} />\n                    {/* invisible button but functionality works */}\n                    <button \n                    className=\"chat-input-btn\"\n                    type=\"submit\">Send Message</button>\n                </form>\n                <div className=\"chat-input-icons\">\n                    <CardGiftcardIcon fontSize=\"large\" />\n                    <GifIcon fontSize=\"large\" />\n                    <EmojiEmotionsIcon fontSize=\"large\" />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Chat\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport Sidebar from './components/Sidebar/Sidebar'\r\nimport Chat from './components/Chat/Chat'\r\n\r\nfunction App() {\r\n  useEffect(() => {\r\n    const fetchUrl = () => {\r\n      const api_key = \"ccb4efa76c26a38b49906fe799ed6f11\";\r\n      fetch('')\r\n      .then(res => res.json())\r\n      .then(data => {console.log(data)});\r\n    }\r\n\r\n    fetchUrl();\r\n  }, [])\r\n  return (\r\n    <div className=\"App\">\r\n      <Sidebar />\r\n      <Chat />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}